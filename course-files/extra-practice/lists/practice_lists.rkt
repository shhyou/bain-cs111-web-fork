#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 539 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 195
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e practice_lists) (read-case-sensitive #t) (teachpacks ()) (htdp-set"
 #"tings #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"Practice Problems for: Lists"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"Procedure coding questions"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"will have a description."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"There are at most two check-expect"
0 0 17 3 24 #"s for any given problem."
0 0 17 29 1 #"\n"
0 0 17 3 44 #"- One check-expect will already be completed"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"- If there is a second one, then based on"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  the description, we ask that you"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  complete the second check-expect"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"Please note that sussman form is used here."
0 0 17 29 1 #"\n"
0 0 17 3 29 #"Sussman form is just a shorth"
0 0 17 3 13 #"and notation;"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"these two procedures are the same:"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"(define (f x)    <--->      (define f"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"   (+ x 2))                     (\316\273 (x)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"                                  (+ 2 x)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 25 #";;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"; Rules of Computation"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"; Questions 1A-1G are about the Rules of Computation."
0 0 17 29 1 #"\n"
0 0 17 3 51 #"; Knowing these rules are helpful for doing well on"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"; exams."
0 0 17 29 1 #"\n"
0 0 17 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1A"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"What do you do if"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"it's a word (variable name)?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1B"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"What do you do if"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"it's a constant?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1C"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"What do you do if it"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"looks like (a b c...)?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1D"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"What do you do if it'"
0 0 17 3 15 #"s (define n v)?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1E"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"What do you do if it starts with local?"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(local [(define n1 v1)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"        (define n2 v2)"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"           ...."
0 0 17 29 1 #"\n"
0 0 17 3 21 #"        (define n v)]"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"       result-exp)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 1F"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"What do you do if it starts with \316\273?"
0 0 17 29 1 #"\n"
0 0 17 3 15 #" (\316\273 (n1 n2...)"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"   result-exp)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 19 #";;;;;;;;;;;;;;;;;;;"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"Lists"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"'() is a shorthand"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"notation for (list...)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"so '(1 2 3) is the same as"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"(list 1 2 3)"
0 0 17 29 1 #"\n"
0 0 17 3 6 #";;;;;;"
0 0 17 3 13 #";;;;;;;;;;;;;"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"Let's say that we define the lists"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"below:"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 2A"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"What does (* (first lst1)"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"             (first (rest lst1)))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"return?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 2B"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"What does (list-ref lst1 3)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"return?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 2C"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"What does (length lst2)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"return?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"QUESTION 2D"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"What does (rest lst2)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"return?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Answer: "
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"QUESTION 3"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"Create a procedure!"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"two-to-five is a procedure"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"that takes in one input:"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"lst, a non-empty list containing"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"numbers only"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"two-to-five returns true if"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"there are at least three numbers"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"in lst that are between 2 (inclusive)"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"and 5 (inclusive)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"please use filter in this procedure"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"two-to-five"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 41 #"\"Delete this string & fill in with code!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"two-to-five"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"two-to-five"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 32 #"\"Delete this string & finish the"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"               check-expect!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"QUESTION 4"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"Create a procedure!"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"num-to-image is a procedure"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"that takes in one input:"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"lst, a non-empty list of numbers"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"it returns a list of circles,"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"in which each circle is solid and"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"blue, and its radius corresponds to"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"10 times its counterpart in lst"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"please use map for this"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"num-to-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 41 #"\"Delete this string & fill in with code!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"num-to-image"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 6           4 21 89
(
 #"(#(struct:translate 10 10 #(struct:ellipse 20 20 0 255 \"blue\")) #("
 #"struct:bb 20 20 20) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 89
(
 #"(#(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"blue\")) #("
 #"struct:bb 40 40 40) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 89
(
 #"(#(struct:translate 30 30 #(struct:ellipse 60 60 0 255 \"blue\")) #("
 #"struct:bb 60 60 60) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 89
(
 #"(#(struct:translate 40 40 #(struct:ellipse 80 80 0 255 \"blue\")) #("
 #"struct:bb 80 80 80) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 94
(
 #"(#(struct:translate 50 50 #(struct:ellipse 100 100 0 255 \"blue\")) "
 #"#(struct:bb 100 100 100) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"num-to-image"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 32 #"\"Delete this string & finish the"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"               check-expect!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"QUESTION 5"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"Create a procedure!"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"squared-threes takes in"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"one input: lst, a non-empty"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"list of numbers"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"it extracts all numbers from lst"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"that are divisible by 3 with a remainder"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"of zero, and then it squares all of these"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"numbers and returns the list of these"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"squared numbers"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"to ensure that this works we'll use"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"remainder (which is modulo or mod)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"remainder: number number -> number"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"(remainder 4 2) returns the remainder of"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"4/2, or 0. (remainder 5 2) would return 1"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"so for squared-threes, numbers are"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"divisible by 3 without a remainder of"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"zero, if (remainder num 3) = 0"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"squared-threes"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 43 #"\"Delete this string & finish in with code!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"squared-threes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"81"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"squared-threes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 32 #"\"Delete this string & finish the"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"               check-expect!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
